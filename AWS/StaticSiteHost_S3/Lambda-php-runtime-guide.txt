AWS Lambda for PHP

Video 2 of 4
- Compile PHP Custom Bootstrap Layer
- Upload your Custom Bootstrap Layer to AWS
- Uploading Vendor and Runtime Folders
- Creating Lambda AWS Test Function

Bootstrap used in this video: https://www.dropbox.com/s/yx8amxf8do5...

Commands used in this video:

sudo yum update -y && sudo yum install autoconf bison gcc gcc-c++ libcurl-devel libxml2-devel -y

=> Downloading AWS CLI 
    curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" 
    unzip awscliv2.zip 
    sudo ./aws/install 
    sudo yum group install 'Development Tools' -y && sudo yum install perl-core zlib-devel -y

=> Download and Setting up OpenSSL 
    cd /usr/local/src/ && sudo wget https://www.openssl.org/source/openssl-1.0.2u.tar.gz 
    sudo tar -xf openssl-1.0.2u.tar.gz 
    cd openssl-1.0.2u 
    cd /usr/local/src/openssl-1.0.2u 
    sudo ./config --prefix=/usr/local/ssl --openssldir=/usr/local/ssl shared zlib 
    sudo make && sudo make install

=> Downloading and compiling the php. 
    cd ~ && mkdir ~/php-8.1.3-source 
    curl -sL https://www.php.net/distributions/php-8.1.3.tar.gz | tar -xvz 
    cd php-8.1.3-source 
    cd ~/php-8.1.3/ 
    ./buildconf --force && sudo yum install oniguruma-devel -y 
    sudo yum install sqlite-devel -y 
    PKG_CONFIG_PATH="/usr/local/ssl/lib/pkgconfig/" 
    ./configure --prefix=/home/ec2-user/php-8.1.3-source --with-openssl=/usr/local/ssl --with-curl --with-mysqli \
    --enable-mbstring --enable-soap && sudo make install

    mkdir -p ~/lambda-root/{bin,src,lib}/ && cd ~/lambda-root 
    touch ./bootstrap && chmod +x ./bootstrap 
    cp ~/php-8.1.3-source/bin/php ./bin 
    curl -sS https://getcomposer.org/installer | ./bin/php 
    ./bin/php composer.phar require guzzlehttp/guzzle 
    ./bin/php composer.phar require "swiftmailer/swiftmailer:^6.0" 
    ./bin/php composer.phar require aws/aws-sdk-php 
    ./bin/php composer.phar require phpzip/phpzip 
    cp /usr/local/src/openssl-1.0.2u/libcrypto.so.1.0.0 lib/ 
    cp /usr/local/src/openssl-1.0.2u/libssl.so.1.0.0 lib/ 
    cp /usr/lib64/libonig.so.2 lib/


=> Making the zip of Runtime and Vendor 
    Runtime - lib, bin, bootstrap 
    Vendor - vendor [only]

    zip -r runtime.zip lib bin bootstrap && zip -r vendor.zip vendor/

=> Configure AWS CLI 
   - Pushing the Vendor & Runtime zip to lambda layers.
     aws lambda publish-layer-version \
        --layer-name php7-vendor-layer \
        --zip-file fileb://vendor.zip \
        --region us-east-1
        
      aws lambda publish-layer-version \
        --layer-name php7-runtime-layer \
        --zip-file fileb://runtime.zip \
        --region us-east-1

=> Note Down the Runtime & Vendor's ARN's 
   runtime ARN - arn:aws:lambda:us-east-1:027200576913:layer:php-runtime-layer:2	
   vendor ARN -  arn:aws:lambda:us-east-1:027200576913:layer:php-vendor-layer:3	

